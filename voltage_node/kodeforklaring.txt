----------------------------------------------------------------------------------------------------------------------------------------
## Samlet formål
-----------------------------------------------------------------------------------------------------------------------------------------
Node måler motorstrøm via en high-side shunt → analog forstærker → MCP3008‐ADC.
Den sender resultatet som ampere på ROS 2-topic `/motor_current`.



----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
#!/usr/bin/env python3


----------------------------------------------------------------------------------------------------------------------------------------
--------imports-------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------

import spidev                                    
import rclpy`, `from rclpy.node import Node   
from std_msgs.msg import Float32`                


----------------------------------------------------------------------------------------------------------------------------------------
-------Konstanter-----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------

V_REF       = 3.3    # ADC reference-spænding (Volt)
GAIN_V_PER_A = 3.83  # Forstærker giver 3.83 V pr. Ampere
ADC_CHANNEL = 0      # MCP3008 kanal 0
SAMPLE_RATE = 50     # Hz – hvor ofte vi måler og publicerer

----------------------------------------------------------------------------------------------------------------------------------------
--------Klassen-------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
class VoltageNode(Node)

    def __init__(self):
        super().__init__("voltage_node")

----------------------------------------------------------------------------------------------------------------------------------------
--------   SPI     ---------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
        self.spi = spidev.SpiDev()
        self.spi.open(0, 0)              # bus 0, chip-select 0
        self.spi.max_speed_hz = 1_000_000

----------------------------------------------------------------------------------------------------------------------------------------
-----------Publisher og timer-----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
        self.publisher = self.create_publisher(Float32,
                                               "/motor_current", 10)
        self.create_timer(1.0 / SAMPLE_RATE, self.measure)
        self.get_logger().info(f"VoltageNode kører {SAMPLE_RATE} Hz")

----------------------------------------------------------------------------------------------------------------------------------------
-------------Læsning af raw ADC---------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
    def _read_adc_raw(self) -> int:
        # SPI-ramme: [start-bit, kanal-vælg, dummy]
        frame = [1, (8 + ADC_CHANNEL) << 4, 0]
        resp  = self.spi.xfer2(frame)
        raw   = ((resp[1] & 0x03) << 8) | resp[2]  # 10-bit tal
        return raw

----------------------------------------------------------------------------------------------------------------------------------------
----------Måling, konvertering og publisering-------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
    def measure(self):
        raw    = self._read_adc_raw()           # 0-1023
        volts  = raw * V_REF / 1023.0           # ADC → Volt
        amps   = volts / GAIN_V_PER_A           # Volt → Ampere
        self.publisher.publish(Float32(data=amps))


----------------------------------------------------------------------------------------------------------------------------------------
-----------Mainloop -------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
def main():
    rclpy.init()
    node = VoltageNode()
    try:
        rclpy.spin(node)        # kør, indtil Ctrl-C
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == "__main__":
    main()
